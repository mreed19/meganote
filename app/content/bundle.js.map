{"version":3,"sources":["bundle.js","app.module.js","notes/notes-form/notes-form.module.js","notes/notes.module.js","sign-in/sign-in.module.js","sign-up/sign-up.module.js","users/users.module.js","constants.js","core/auth.interceptor.js","helpers/angular-loading-spinner.js","notes/config.route.js","notes/note.service.js","notes/notes-form/notes-form.controller.js","notes/notes.controller.js","notes/notes.service.js","sign-in/sign-in.directive.js","sign-up/sign-up.directive.js","users/auth-token.service.js","users/config.route.js","users/current-user.service.js","users/profile.directive.js","users/user-links.directive.js","users/users.service.js"],"names":["_classCallCheck","instance","Constructor","TypeError","configFunction","$urlRouterProvider","otherwise","run","$rootScope","$state","$on","go","angular","module","config","$inject","constant","AuthInterceptor","AuthToken","API_BASE","request","req","token","get","url","includes","headers","Authorization","authConfig","$httpProvider","interceptors","push","factory","directive","$http","link","scope","elm","spinnerActive","isLoading","pendingRequests","length","$watch","loading","removeClass","addClass","call","undefined","$stateProvider","state","templateUrl","controller","controllerAs","resolve","authenticated","data","title","CurrentUser","Promise","reject","signedIn","Note","$resource","NotesFormController","Flash","params","noteId","id","clearForm","vm","note","body_html","editing","save","destroy","this","NotesController","notes","query","NotesService","getNotes","notesPromise","apiURI","then","res","service","create","post","unshift","update","put","_id","removeById","i","splice","find","copy","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","UsersService","SignInController","value","login","user","message","bindToController","template","SignUpController","errors","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","keys","Symbol","iterator","next","done","err","$window","localStorage","getItem","setItem","removeItem","JSON","parse","stringify","UserProfileController","UserLinksController","clear","usersPromise","set","authToken"],"mappings":"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","file":"bundle.js","sourcesContent":["'use strict';\n\n{\n  var configFunction = function configFunction($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n  };\n\n  var run = function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSucess', function () {\n      $rootScope.$state = $state;\n    });\n\n    $rootScope.$on('$stateChangError', function () {\n      $state.go('sign-in');\n    });\n  };\n\n  angular.module('meganote', ['ui.router', 'ngFlash', 'textAngular', 'angularSpinner', 'ngLoadingSpinner', 'ngResource', 'meganote.notes', 'meganote.notesForm', 'meganote.signUp', 'meganote.users', 'meganote.signIn']).config(configFunction);\n\n  configFunction.$inject = ['$urlRouterProvider'];\n\n\n  run.$inject = ['$rootScope', '$state'];\n}\n'use strict';\n\n{\n  angular.module('meganote.notesForm', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.notes', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.signIn', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.signUp', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.users', []);\n}\n'use strict';\n\n{\n  angular.module('meganote').constant('API_BASE', 'http://localhost:3030/api/v1/');\n}\n'use strict';\n\n{\n  var AuthInterceptor = function AuthInterceptor(AuthToken, API_BASE) {\n    return {\n      request: function request(req) {\n        var token = AuthToken.get();\n        if (token && req.url.includes(API_BASE)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  };\n\n  var authConfig = function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  };\n\n  angular.module('meganote').factory('AuthInterceptor', AuthInterceptor).config(authConfig);\n\n  AuthInterceptor.$inject = ['AuthToken', 'API_BASE'];\n\n\n  authConfig.$inject = ['$httpProvider'];\n}\n'use strict';\n\n(function () {\n  angular.module('ngLoadingSpinner', ['angularSpinner']).directive('usSpinner', ['$http', '$rootScope', function ($http, $rootScope) {\n    return {\n      link: function link(scope, elm) {\n        $rootScope.spinnerActive = false;\n        scope.isLoading = function () {\n          return $http.pendingRequests.length > 0;\n        };\n\n        scope.$watch(scope.isLoading, function (loading) {\n          $rootScope.spinnerActive = loading;\n          if (loading) {\n            elm.removeClass('ng-hide');\n          } else {\n            elm.addClass('ng-hide');\n          }\n        });\n      }\n    };\n  }]);\n}).call(undefined);\n'use strict';\n\n{\n  (function () {\n    var configFunction = function configFunction($stateProvider) {\n      $stateProvider.state('notes', {\n        url: '/notes',\n        templateUrl: 'notes/notes.html',\n        controller: 'NotesController',\n        controllerAs: 'vm',\n        resolve: {\n          authenticated: authenticated\n        },\n        data: {\n          title: 'Notes'\n        }\n      }).state('notes.form', {\n        url: '/:noteId',\n        templateUrl: 'notes/notes-form/notes-form.html',\n        controller: 'NotesFormController',\n        controllerAs: 'vm'\n      });\n    };\n\n    var authenticated = function authenticated(CurrentUser) {\n      return new Promise(function (resolve, reject) {\n        if (CurrentUser.signedIn()) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    };\n\n    angular.module('meganote.notes').config(configFunction);\n\n    configFunction.$inject = ['$stateProvider'];\n\n\n    authenticated.$inject = ['CurrentUser'];\n  })();\n}\n'use strict';\n\n{\n  var Note = function Note($resource, API_BASE) {\n    return $resource(API_BASE + 'notes/:id');\n  };\n\n  angular.module('meganote.notes').factory('Note', Note);\n\n  Note.$inject = ['$resource', 'API_BASE'];\n}\n'use strict';\n\n{\n  var NotesFormController = function NotesFormController($state, Flash, Note) {\n    var vm = this;\n\n    vm.note = get();\n    vm.clearForm = clearForm;\n    vm.save = save;\n    vm.destroy = destroy;\n\n    /////////////////////\n\n    function get() {\n      if ($state.params.noteId) {\n        return Note.get({ id: $state.params.noteId });\n      }\n      return new Note();\n    }\n\n    function clearForm() {\n      vm.note = { title: '', body_html: '' };\n      vm.editing = false;\n    }\n\n    function save() {\n      // if (vm.note._id) {\n      //   NotesService.update(vm.note)\n      //   .then(res => {\n      //     vm.note = angular.copy(res.data);\n      //     Flash.create('success', 'Saved!');\n      //   },\n      //   () => Flash.create('danger', 'Oops! Something went wrong')\n      //   );\n      // }\n      // else {\n      //   NotesService.create(vm.note)\n      //   .then(res => {\n      //     vm.note = res.data;\n      //     Flash.create('success', 'Created!');\n      //     $state.go('notes.form', {\n      //       noteId: vm.note._id\n      //     });\n      //   },\n      //   () => Flash.create('danger', 'Oops! Something went wrong')\n      //   );\n      // }\n    }\n\n    function destroy() {\n      // NotesService.destroy(vm.note)\n      // .then(\n      //   () => {\n      //     $state.go('notes.form', { noteId: undefined });\n      //   },\n      //   () => Flash.create('danger', 'Oops! Something went wrong!')\n      // );\n    }\n  };\n\n  angular.module('meganote.notesForm').controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$state', 'Flash', 'Note'];\n}\n'use strict';\n\n{\n  var NotesController = function NotesController(Note) {\n    var vm = this;\n    vm.notes = Note.query();\n  };\n\n  angular.module('meganote.notes').controller('NotesController', NotesController);\n\n  NotesController.$inject = ['Note'];\n}\n'use strict';\n\n{\n  var NotesService = function NotesService($http, API_BASE) {\n    var apiURI = API_BASE + 'notes/';\n\n    var service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      destroy: destroy,\n      removeById: removeById,\n      find: find\n    };\n\n    return service;\n\n    ///////////////\n\n    function getNotes() {\n      var notesPromise = $http.get(apiURI);\n      notesPromise.then(function (res) {\n        return service.notes = res.data;\n      });\n      return notesPromise;\n    }\n\n    function create(note) {\n      var notesPromise = $http.post(apiURI, note);\n      notesPromise.then(function (res) {\n        return service.notes.unshift(res.data);\n      });\n      return notesPromise;\n    }\n\n    function update(note) {\n      var notesPromise = $http.put('' + apiURI + note._id, note);\n      notesPromise.then(function (res) {\n        service.removeById(res.data._id);\n        service.notes.unshift(res.data);\n      });\n      return notesPromise;\n    }\n\n    function destroy(note) {\n      var notesPromise = $http.delete('' + apiURI + note._id);\n      notesPromise.then(function (res) {\n        return service.removeById(res.data._id);\n      });\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (var i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (var i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  };\n\n  angular.module('meganote.notes').factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'API_BASE'];\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.signIn').directive('signIn', ['$state', 'Flash', 'UsersService', function ($state, Flash, UsersService) {\n    var SignInController = function () {\n      function SignInController() {\n        _classCallCheck(this, SignInController);\n      }\n\n      _createClass(SignInController, [{\n        key: 'submit',\n        value: function submit() {\n          var vm = this;\n          UsersService.login(vm.user).then(function () {\n            return $state.go('notes.form', { noteId: undefined });\n          }, function (res) {\n            return Flash.create('danger', res.data.message);\n          });\n        }\n      }]);\n\n      return SignInController;\n    }();\n\n    return {\n      scope: {},\n      controller: SignInController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"container\">\\n            <div class=\"row\">\\n              <div class=\"col-xs-6 col-xs-offset-4\">\\n                <h3>Welcome back!</h3>\\n                <form id=\"new_user\" ng-submit=\"vm.submit()\" novalidate>\\n                  <p>\\n                    <label for=\"username\">Username</label><br>\\n                    <input\\n                      ng-model=\"vm.user.username\"\\n                      type=\"text\"\\n                      name=\"username\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"password\">Password</label><br>\\n                    <input\\n                      ng-model=\"vm.user.password\"\\n                      type=\"password\"\\n                      name=\"password\"\\n                      required>\\n                  </p>\\n                  <input type=\"submit\" name=\"commit\" value=\"Sign In\" class=\"btn btn-default\">\\n                  <span class=\"login\">\\n                    Don\\'t have an account?\\n                    <a ui-sref=\"sign-up\">Sign up!</a>\\n                  </span>\\n                </form>\\n                <flash-message\\n                  duration=\"5000\"\\n                  show-close=\"false\"\\n                  ></flash-message>\\n                <span us-spinner=\"{top:100}\"></span>\\n              </div>\\n            </div>\\n          </div>\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.signUp').directive('signUp', ['$state', 'Flash', 'UsersService', function ($state, Flash, UsersService) {\n    var SignUpController = function () {\n      function SignUpController() {\n        _classCallCheck(this, SignUpController);\n\n        this.user = {};\n      }\n\n      _createClass(SignUpController, [{\n        key: 'submit',\n        value: function submit() {\n          UsersService.create(this.user).then(function () {\n            return $state.go('notes.form', { noteId: undefined });\n          }, function (res) {\n            if (res.data.errors) {\n              var message = 'Oops! Something went wrong.<ul>';\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = Object.keys(res.data.errors)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var key = _step.value;\n\n                  message += '<li>' + res.data.errors[key].message + '</li>';\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              message += '</ul>';\n              Flash.create('danger', message);\n            }\n          });\n        }\n      }]);\n\n      return SignUpController;\n    }();\n\n    return {\n      scope: {},\n      controller: SignUpController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '<div class=\"container\">\\n            <div class=\"row\">\\n              <div class=\"col-xs-6 col-xs-offset-4\">\\n                <h3>Sign Up for Meganote</h3>\\n                <form id=\"new_user\" ng-submit=\"vm.submit()\" novalidate>\\n                  <p>\\n                    <label for=\"name\">Full Name</label><br>\\n                    <input\\n                      ng-model=\"vm.user.name\"\\n                      type=\"text\"\\n                      name=\"name\"\\n                      autofocus=\"autofocus\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"username\">Username</label><br>\\n                    <input\\n                      ng-model=\"vm.user.username\"\\n                      type=\"text\"\\n                      name=\"username\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"password\">Password</label><br>\\n                    <input\\n                      ng-model=\"vm.user.password\"\\n                      type=\"password\"\\n                      name=\"password\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"passwordConfirmation\">Re-type Password</label><br>\\n                    <input\\n                      ng-model=\"vm.user.passwordConfirmation\"\\n                      type=\"password\"\\n                      name=\"passwordConfirmation\"\\n                      required>\\n                  </p>\\n                  <input type=\"submit\" name=\"commit\" value=\"Sign Up\" class=\"btn btn-default\">\\n                  <span class=\"login\">\\n                    Already have an account?\\n                    <a ui-sref=\"sign-in\">Log in.</a>\\n                  </span>\\n                </form>\\n                <flash-message\\n                  duration=\"5000\"\\n                  show-close=\"false\"\\n                ></flash-message>\\n                <span us-spinner=\"{top:100}\"></span>\\n              </div>\\n            </div>\\n          </div>\\n'\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('AuthToken', ['$window', function ($window) {\n    var AuthToken = function () {\n      function AuthToken() {\n        _classCallCheck(this, AuthToken);\n\n        this.token = $window.localStorage.getItem('authToken');\n      }\n\n      _createClass(AuthToken, [{\n        key: 'set',\n        value: function set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n      }, {\n        key: 'get',\n        value: function get() {\n          return this.token;\n        }\n      }, {\n        key: 'clear',\n        value: function clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }]);\n\n      return AuthToken;\n    }();\n\n    return new AuthToken();\n  }]);\n}\n'use strict';\n\n{\n  var configFunction = function configFunction($stateProvider) {\n    $stateProvider.state('sign-up', {\n      url: '/sign-up',\n      template: '<sign-up></sign-up>',\n      data: {\n        title: 'Sign up'\n      }\n    }).state('sign-in', {\n      url: '/sign-in',\n      template: '<sign-in></sign-in>',\n      data: {\n        title: 'Sign in'\n      }\n    }).state('user-profile', {\n      url: '/profile',\n      template: '<user-profile></user-profile>',\n      data: {\n        title: 'Profile'\n      }\n    });\n  };\n\n  angular.module('meganote.users').config(configFunction);\n\n  configFunction.$inject = ['$stateProvider'];\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('CurrentUser', ['$window', function ($window) {\n    var CurrentUser = function () {\n      function CurrentUser() {\n        _classCallCheck(this, CurrentUser);\n\n        this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n      }\n\n      _createClass(CurrentUser, [{\n        key: 'set',\n        value: function set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n      }, {\n        key: 'get',\n        value: function get() {\n          return this.user || {};\n        }\n      }, {\n        key: 'clear',\n        value: function clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n      }, {\n        key: 'signedIn',\n        value: function signedIn() {\n          return !!this.get()._id;\n        }\n      }]);\n\n      return CurrentUser;\n    }();\n\n    return new CurrentUser();\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').directive('userProfile', ['Flash', 'CurrentUser', 'UsersService', function (Flash, CurrentUser, UsersService) {\n    var UserProfileController = function () {\n      function UserProfileController() {\n        _classCallCheck(this, UserProfileController);\n\n        var vm = this;\n        vm.user = angular.copy(CurrentUser.get());\n      }\n\n      _createClass(UserProfileController, [{\n        key: 'submit',\n        value: function submit() {\n          var vm = this;\n          UsersService.update(vm.user).then(function () {\n            return Flash.create('success', 'Successfully updated user.');\n          }, function (res) {\n            if (res.data.errors) {\n              var message = 'Oops! Something went wrong.<ul>';\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = Object.keys(res.data.errors)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var key = _step.value;\n\n                  message += '<li>' + res.data.errors[key].message + '</li>';\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              message += '</ul>';\n              Flash.create('danger', message);\n            }\n          });\n        }\n      }]);\n\n      return UserProfileController;\n    }();\n\n    return {\n      scope: {},\n      controller: UserProfileController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"container\">\\n            <div class=\"row\">\\n              <div class=\"col-xs-6 col-xs-offset-4\">\\n                <h3>Update Your Profile</h3>\\n                <form id=\"new_user\" ng-submit=\"vm.submit()\" novalidate>\\n                  <p>\\n                    <label for=\"name\">Full Name</label><br>\\n                    <input\\n                      ng-model=\"vm.user.name\"\\n                      type=\"text\"\\n                      name=\"name\"\\n                      autofocus=\"autofocus\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"username\">Username</label><br>\\n                    <input\\n                      ng-model=\"vm.user.username\"\\n                      type=\"text\"\\n                      name=\"username\"\\n                      required>\\n                  </p>\\n                  <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\\n                  <span class=\"login\">\\n                    <a ui-sref=\"notes.form({ noteId: undefined })\">\\n                      Back to my notes\\n                    </a>\\n                </form>\\n                <flash-message\\n                  duration=\"5000\"\\n                  show-close=\"false\"\\n                  ></flash-message>\\n                <span us-spinner=\"{top:100}\"></span>\\n              </div>\\n            </div>\\n          </div>\\n\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').directive('userLinks', ['CurrentUser', 'AuthToken', function (CurrentUser, AuthToken) {\n    var UserLinksController = function () {\n      function UserLinksController() {\n        _classCallCheck(this, UserLinksController);\n      }\n\n      _createClass(UserLinksController, [{\n        key: 'user',\n        value: function user() {\n          return CurrentUser.get();\n        }\n      }, {\n        key: 'signedIn',\n        value: function signedIn() {\n          return CurrentUser.signedIn();\n        }\n      }, {\n        key: 'logout',\n        value: function logout() {\n          CurrentUser.clear();\n          AuthToken.clear();\n        }\n      }]);\n\n      return UserLinksController;\n    }();\n\n    return {\n      scope: {},\n      controller: UserLinksController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"user-links\">\\n            <span ng-show=\"vm.signedIn()\">\\n              <a ui-sref=\"user-profile\">Signed in as {{ vm.user().name }}</a>\\n              |\\n              <a ui-sref=\"sign-in\" ng-click=\"vm.logout()\">Logout</a>\\n            </span>\\n            <span ng-show=\"!vm.signedIn()\">\\n              <a ui-sref=\"sign-up\">Sign up for Meganote today!</a>\\n            </span>\\n          </div>\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('UsersService', ['$http', 'API_BASE', 'AuthToken', 'CurrentUser', function ($http, API_BASE, AuthToken, CurrentUser) {\n\n    var apiURI = API_BASE + 'users/';\n\n    var UsersService = function () {\n      function UsersService() {\n        _classCallCheck(this, UsersService);\n      }\n\n      _createClass(UsersService, [{\n        key: 'create',\n\n\n        // Sign up\n        value: function create(user) {\n          var usersPromise = $http.post(apiURI, {\n            user: user\n          });\n          usersPromise.then(function (res) {\n            AuthToken.set(res.data.authToken);\n            CurrentUser.set(res.data.user);\n          });\n          return usersPromise;\n        }\n\n        // Update Profile\n\n      }, {\n        key: 'update',\n        value: function update(user) {\n          var usersPromise = $http.put('' + apiURI + user._id, { user: user });\n          usersPromise.then(function (res) {\n            return CurrentUser.set(res.data.user);\n          });\n          return usersPromise;\n        }\n\n        // Login\n\n      }, {\n        key: 'login',\n        value: function login(user) {\n          var usersPromise = $http.post(API_BASE + 'sessions/', { user: user });\n          usersPromise.then(function (res) {\n            AuthToken.set(res.data.authToken);\n            CurrentUser.set(res.data.user);\n          });\n          return usersPromise;\n        }\n      }]);\n\n      return UsersService;\n    }();\n\n    return new UsersService();\n  }]);\n}","{\n  angular.module('meganote', [\n    'ui.router',\n    'ngFlash',\n    'textAngular',\n    'angularSpinner',\n    'ngLoadingSpinner',\n    'ngResource',\n    'meganote.notes',\n    'meganote.notesForm',\n    'meganote.signUp',\n    'meganote.users',\n    'meganote.signIn'\n  ])\n  .config(configFunction);\n\n  configFunction.$inject = ['$urlRouterProvider'];\n  function configFunction($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n  }\n\n  run.$inject = ['$rootScope', '$state'];\n  function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSucess', () => {\n      $rootScope.$state = $state;\n    });\n\n    $rootScope.$on('$stateChangError', () => {\n      $state.go('sign-in');\n    });\n  }\n}\n","{\n  angular.module('meganote.notesForm', []);\n}\n","{\n  angular.module('meganote.notes', []);\n}\n","{\n  angular.module('meganote.signIn', []);\n}\n","{\n  angular.module('meganote.signUp', []);\n}\n","{\n  angular.module('meganote.users', []);\n}\n","{\n  angular\n    .module('meganote')\n    .constant('API_BASE', 'http://localhost:3030/api/v1/');\n}\n","{\n  angular\n    .module('meganote')\n    .factory('AuthInterceptor', AuthInterceptor)\n    .config(authConfig);\n\n  AuthInterceptor.$inject = ['AuthToken', 'API_BASE'];\n  function AuthInterceptor(AuthToken, API_BASE) {\n    return {\n      request(req) {\n        const token = AuthToken.get();\n        if (token && req.url.includes(API_BASE)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  }\n\n  authConfig.$inject = ['$httpProvider'];\n  function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  }\n}\n","(function(){\n  angular\n    .module('ngLoadingSpinner', ['angularSpinner'])\n    .directive('usSpinner',   ['$http', '$rootScope' ,function ($http, $rootScope){\n      return {\n        link: function (scope, elm)\n        {\n          $rootScope.spinnerActive = false;\n          scope.isLoading = function () {\n            return $http.pendingRequests.length > 0;\n          };\n\n          scope.$watch(scope.isLoading, function (loading)\n          {\n            $rootScope.spinnerActive = loading;\n            if(loading){\n              elm.removeClass('ng-hide');\n            }\n            else {\n              elm.addClass('ng-hide');\n            }\n          });\n        }\n      };\n\n    }]);\n}).call(this);\n","{\n  angular\n    .module('meganote.notes')\n    .config(configFunction);\n\n  configFunction.$inject = ['$stateProvider'];\n  function configFunction($stateProvider) {\n    $stateProvider\n\n      .state('notes', {\n        url: '/notes',\n        templateUrl: 'notes/notes.html',\n        controller: 'NotesController',\n        controllerAs: 'vm',\n        resolve: {\n          authenticated: authenticated\n        },\n        data: {\n          title: 'Notes'\n        }\n      })\n\n      .state('notes.form', {\n        url: '/:noteId',\n        templateUrl: 'notes/notes-form/notes-form.html',\n        controller: 'NotesFormController',\n        controllerAs: 'vm'\n      });\n  }\n\n  authenticated.$inject = ['CurrentUser'];\n  function authenticated(CurrentUser) {\n    return new Promise((resolve, reject) => {\n      if (CurrentUser.signedIn()) { resolve(); }\n      else { reject(); }\n    });\n  }\n}\n","{\n  angular\n    .module('meganote.notes')\n    .factory('Note', Note);\n\n  Note.$inject = ['$resource', 'API_BASE'];\n  function Note($resource, API_BASE) {\n    return $resource(`${API_BASE}notes/:id`);\n  }\n}\n","{\n  angular\n    .module('meganote.notesForm')\n    .controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$state', 'Flash', 'Note'];\n  function NotesFormController($state, Flash, Note) {\n    const vm = this;\n\n    vm.note = get();\n    vm.clearForm = clearForm;\n    vm.save = save;\n    vm.destroy = destroy;\n\n    /////////////////////\n\n    function get() {\n      if ($state.params.noteId) {\n        return Note.get({ id: $state.params.noteId });\n      }\n      return new Note();\n    }\n\n    function clearForm() {\n      vm.note = { title: '', body_html: ''};\n      vm.editing = false;\n    }\n\n    function save() {\n      // if (vm.note._id) {\n      //   NotesService.update(vm.note)\n      //   .then(res => {\n      //     vm.note = angular.copy(res.data);\n      //     Flash.create('success', 'Saved!');\n      //   },\n      //   () => Flash.create('danger', 'Oops! Something went wrong')\n      //   );\n      // }\n      // else {\n      //   NotesService.create(vm.note)\n      //   .then(res => {\n      //     vm.note = res.data;\n      //     Flash.create('success', 'Created!');\n      //     $state.go('notes.form', {\n      //       noteId: vm.note._id\n      //     });\n      //   },\n      //   () => Flash.create('danger', 'Oops! Something went wrong')\n      //   );\n      // }\n    }\n\n    function destroy() {\n      // NotesService.destroy(vm.note)\n      // .then(\n      //   () => {\n      //     $state.go('notes.form', { noteId: undefined });\n      //   },\n      //   () => Flash.create('danger', 'Oops! Something went wrong!')\n      // );\n    }\n  }\n}\n","{\n  angular\n    .module('meganote.notes')\n    .controller('NotesController', NotesController);\n\n  NotesController.$inject = ['Note'];\n  function NotesController(Note) {\n    const vm = this;\n    vm.notes = Note.query();\n  }\n}\n","{\n  angular\n    .module('meganote.notes')\n    .factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'API_BASE'];\n  function NotesService($http, API_BASE) {\n    const apiURI = `${API_BASE}notes/`;\n\n    const service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      destroy: destroy,\n      removeById: removeById,\n      find: find,\n    };\n\n    return service;\n\n    ///////////////\n\n    function getNotes() {\n      const notesPromise = $http.get(apiURI);\n      notesPromise.then(res => service.notes = res.data);\n      return notesPromise;\n    }\n\n    function create(note) {\n      const notesPromise = $http.post(apiURI, note);\n      notesPromise.then(res => service.notes.unshift(res.data));\n      return notesPromise;\n    }\n\n    function update(note) {\n      const notesPromise = $http.put(`${apiURI}${note._id}`, note);\n      notesPromise.then(res => {\n        service.removeById(res.data._id);\n        service.notes.unshift(res.data);\n      });\n      return notesPromise;\n    }\n\n    function destroy(note) {\n      const notesPromise = $http.delete(`${apiURI}${note._id}`);\n      notesPromise.then(res => service.removeById(res.data._id));\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (let i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (let i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  }\n}\n","{\n  angular\n    .module('meganote.signIn')\n    .directive('signIn', [\n\n      '$state',\n      'Flash',\n      'UsersService',\n      ($state, Flash, UsersService) => {\n        class SignInController {\n          submit() {\n            var vm = this;\n            UsersService.login(vm.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined }),\n                res => Flash.create('danger', res.data.message)\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignInController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Welcome back!</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\" novalidate>\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      ng-model=\"vm.user.username\"\n                      type=\"text\"\n                      name=\"username\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"password\">Password</label><br>\n                    <input\n                      ng-model=\"vm.user.password\"\n                      type=\"password\"\n                      name=\"password\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Sign In\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    Don't have an account?\n                    <a ui-sref=\"sign-up\">Sign up!</a>\n                  </span>\n                </form>\n                <flash-message\n                  duration=\"5000\"\n                  show-close=\"false\"\n                  ></flash-message>\n                <span us-spinner=\"{top:100}\"></span>\n              </div>\n            </div>\n          </div>\n\n          `\n        };\n      }\n\n    ]);\n}\n","{\n  angular\n    .module('meganote.signUp')\n    .directive('signUp', [\n\n      '$state',\n      'Flash',\n      'UsersService',\n      ($state, Flash, UsersService) => {\n\n        class SignUpController {\n          constructor() {\n            this.user = {};\n          }\n          submit() {\n            UsersService.create(this.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined }),\n                res => {\n                  if (res.data.errors) {\n                    var message = 'Oops! Something went wrong.<ul>';\n                    for (var key of Object.keys(res.data.errors)) {\n                      message += '<li>' + res.data.errors[key].message + '</li>';\n                    }\n                    message += '</ul>';\n                    Flash.create('danger', message);\n                  }\n                }\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignUpController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `<div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Sign Up for Meganote</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\" novalidate>\n                  <p>\n                    <label for=\"name\">Full Name</label><br>\n                    <input\n                      ng-model=\"vm.user.name\"\n                      type=\"text\"\n                      name=\"name\"\n                      autofocus=\"autofocus\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      ng-model=\"vm.user.username\"\n                      type=\"text\"\n                      name=\"username\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"password\">Password</label><br>\n                    <input\n                      ng-model=\"vm.user.password\"\n                      type=\"password\"\n                      name=\"password\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"passwordConfirmation\">Re-type Password</label><br>\n                    <input\n                      ng-model=\"vm.user.passwordConfirmation\"\n                      type=\"password\"\n                      name=\"passwordConfirmation\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Sign Up\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    Already have an account?\n                    <a ui-sref=\"sign-in\">Log in.</a>\n                  </span>\n                </form>\n                <flash-message\n                  duration=\"5000\"\n                  show-close=\"false\"\n                ></flash-message>\n                <span us-spinner=\"{top:100}\"></span>\n              </div>\n            </div>\n          </div>\n`\n        };\n      }]\n    );\n}\n","{\n  angular\n    .module('meganote.users')\n    .service('AuthToken', ['$window', $window => {\n\n      class AuthToken {\n        constructor() {\n          this.token = $window.localStorage.getItem('authToken');\n        }\n        set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n        get() {\n          return this.token;\n        }\n        clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }\n\n      return new AuthToken();\n    }]);\n\n\n}\n","{\n  angular\n    .module('meganote.users')\n    .config(configFunction);\n\n  configFunction.$inject = ['$stateProvider'];\n  function configFunction($stateProvider) {\n    $stateProvider.state('sign-up', {\n      url: '/sign-up',\n      template: '<sign-up></sign-up>',\n      data: {\n        title: 'Sign up'\n      }\n    })\n\n    .state('sign-in', {\n      url: '/sign-in',\n      template: '<sign-in></sign-in>',\n      data: {\n        title: 'Sign in'\n      }\n    })\n\n    .state('user-profile', {\n      url: '/profile',\n      template: '<user-profile></user-profile>',\n      data: {\n        title: 'Profile'\n      }\n    });\n  }\n}\n","{\n  angular\n    .module('meganote.users')\n    .service('CurrentUser', ['$window', $window => {\n\n      class CurrentUser {\n        constructor() {\n          this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n        }\n        set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n        get() {\n          return this.user || {};\n        }\n        clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n        signedIn() {\n          return !!this.get()._id;\n        }\n      }\n\n      return new CurrentUser();\n    }]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .directive('userProfile', [\n\n      'Flash',\n      'CurrentUser',\n      'UsersService',\n      (Flash, CurrentUser, UsersService) => {\n        class UserProfileController {\n          constructor() {\n            var vm = this;\n            vm.user = angular.copy(CurrentUser.get());\n          }\n          submit() {\n            var vm = this;\n            UsersService.update(vm.user).then(\n              () => Flash.create('success', 'Successfully updated user.'),\n              res =>  {\n                if (res.data.errors) {\n                  var message = 'Oops! Something went wrong.<ul>';\n                  for (var key of Object.keys(res.data.errors)) {\n                    message += '<li>' + res.data.errors[key].message + '</li>';\n                  }\n                  message += '</ul>';\n                  Flash.create('danger', message);\n                }\n              }\n            );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserProfileController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Update Your Profile</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\" novalidate>\n                  <p>\n                    <label for=\"name\">Full Name</label><br>\n                    <input\n                      ng-model=\"vm.user.name\"\n                      type=\"text\"\n                      name=\"name\"\n                      autofocus=\"autofocus\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      ng-model=\"vm.user.username\"\n                      type=\"text\"\n                      name=\"username\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    <a ui-sref=\"notes.form({ noteId: undefined })\">\n                      Back to my notes\n                    </a>\n                </form>\n                <flash-message\n                  duration=\"5000\"\n                  show-close=\"false\"\n                  ></flash-message>\n                <span us-spinner=\"{top:100}\"></span>\n              </div>\n            </div>\n          </div>\n\n\n          `\n        };\n      }\n    ]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .directive('userLinks', [\n\n      'CurrentUser',\n      'AuthToken',\n      (CurrentUser, AuthToken) => {\n\n        class UserLinksController {\n          user() {\n            return CurrentUser.get();\n          }\n          signedIn() {\n            return CurrentUser.signedIn();\n          }\n          logout() {\n            CurrentUser.clear();\n            AuthToken.clear();\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserLinksController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"user-links\">\n            <span ng-show=\"vm.signedIn()\">\n              <a ui-sref=\"user-profile\">Signed in as {{ vm.user().name }}</a>\n              |\n              <a ui-sref=\"sign-in\" ng-click=\"vm.logout()\">Logout</a>\n            </span>\n            <span ng-show=\"!vm.signedIn()\">\n              <a ui-sref=\"sign-up\">Sign up for Meganote today!</a>\n            </span>\n          </div>\n\n          `\n        };\n      }\n    ]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .service('UsersService', [\n      '$http',\n      'API_BASE',\n      'AuthToken',\n      'CurrentUser',\n      ($http, API_BASE, AuthToken, CurrentUser) =>{\n\n        const apiURI = `${API_BASE}users/`;\n\n        class UsersService {\n\n          // Sign up\n          create(user) {\n            const usersPromise = $http.post(apiURI, {\n              user\n            });\n            usersPromise.then(\n              res => {\n                AuthToken.set(res.data.authToken);\n                CurrentUser.set(res.data.user);\n              }\n            );\n            return usersPromise;\n          }\n\n          // Update Profile\n          update(user) {\n            const usersPromise = $http.put(`${apiURI}${user._id}`, { user });\n            usersPromise.then(res => CurrentUser.set(res.data.user));\n            return usersPromise;\n          }\n\n          // Login\n          login(user) {\n            const usersPromise = $http.post(`${API_BASE}sessions/`, { user });\n            usersPromise.then(\n              res => {\n                AuthToken.set(res.data.authToken);\n                CurrentUser.set(res.data.user);\n              }\n            );\n            return usersPromise;\n          }\n        }\n\n        return new UsersService();\n      }\n    ]);\n}\n"],"sourceRoot":"/source/"}